<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>my own space</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://Kasper4649.github.io/"/>
  <updated>2020-01-19T13:51:38.273Z</updated>
  <id>https://Kasper4649.github.io/</id>
  
  <author>
    <name>Kasper</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Learning How to Learn Week1</title>
    <link href="https://Kasper4649.github.io/2020/01/19/Learning-How-to-Learn-Week1/"/>
    <id>https://Kasper4649.github.io/2020/01/19/Learning-How-to-Learn-Week1/</id>
    <published>2020-01-18T16:07:58.000Z</published>
    <updated>2020-01-19T13:51:38.273Z</updated>
    
    <content type="html"><![CDATA[<p>由 UCSD 在 Coursera 上开设的一门基于神经科学和认知心理学的研究成果，通过提供一些实用技巧来改善学习效果的课程。学会如何学习，以及如何创意思考，解决所有问题。</p><hr><h2 id="Thinking-Modes"><a href="#Thinking-Modes" class="headerlink" title="Thinking Modes"></a>Thinking Modes</h2><p><img src="https://i.loli.net/2020/01/19/Q7OgJhqRYlsEMUw.png" alt="Thinking Modes"></p><ul><li><p>Focused Mode — 利用已知的思路，解决熟悉的领域，比如数学问题。</p><ul><li>Sequential Thinking</li></ul></li><li><p>Diffuse Mode — 面对新问题时，<strong>利用跑步、打盹等 exercises 转换思维进入发散模式，让思绪随机跳跃，以此获得灵感</strong>。</p><ul><li>Holistic Thinking</li></ul></li></ul><p><img src="https://i.loli.net/2020/01/19/3r6zWBk7jRbHl5y.png" alt="Thinking Modes">如同硬币正反两面一样，<strong>大脑无法同时进入两种模式</strong>。解决问题时，整体思考所获得的灵感必须经由顺序思考来确认其正确性，能在两种模式下灵活切换的人便能更好地学习。</p><h2 id="Procrastination"><a href="#Procrastination" class="headerlink" title="Procrastination"></a>Procrastination</h2><p><img src="https://i.loli.net/2020/01/19/hKcflsLeXZMn1Q4.png" alt="Procrastination"></p><h3 id="Pomodoro"><a href="#Pomodoro" class="headerlink" title="Pomodoro"></a>Pomodoro</h3><ul><li>25 minutes</li><li>no interruptions</li><li>focus</li><li>reward</li></ul><blockquote><p><a href="https://tomato-timer.com/" target="_blank" rel="noopener">Pomodoro</a></p></blockquote><h2 id="Practice-Makes-Permanent"><a href="#Practice-Makes-Permanent" class="headerlink" title="Practice Makes Permanent"></a>Practice Makes Permanent</h2><p>练习，对于学习抽象性的概念很有帮助。</p><p>通过练习，能加强学习过程中所生成神经元的连接，即使学习的概念是抽象的，但生成的神经元连接是真实具体的。</p><p><img src="https://i.loli.net/2020/01/19/9ROsxPfoE1IlTXD.png" alt="image.png"></p><p><strong>利用专注模式深刻练习并记忆思路，然后休息一会，让大脑利用发散模式完成对新概念的理解。</strong>好比砌墙，必须等砂浆固化才能继续完成。</p><h2 id="Memories"><a href="#Memories" class="headerlink" title="Memories"></a>Memories</h2><ul><li>Working Memory — 即时且有意识处理讯息所涉及的部分，即短期记忆。</li><li>Long-term Memory — 存储基本概念和技巧的仓库。</li></ul><p>需要通过时间重复记忆练习将工作记忆转化为长期记忆。</p><h3 id="Space-Repetition"><a href="#Space-Repetition" class="headerlink" title="Space Repetition"></a>Space Repetition</h3><p>重复的练习分散到几天完成比集中到一天的效果要好很多。</p><h3 id="Tricks"><a href="#Tricks" class="headerlink" title="Tricks"></a>Tricks</h3><ul><li>图像可以直接唤醒右脑的 <strong>Visual Spatial Centers</strong>，帮助更好封装概念和知识。</li><li>用笔写下来的东西的确更容易被记住。</li></ul><h2 id="Sleep"><a href="#Sleep" class="headerlink" title="Sleep"></a>Sleep</h2><p><img src="https://i.loli.net/2020/01/19/MZhKvkPiw9pVu37.png" alt="image.png"></p><p>睡眠时脑细胞会缩小以清楚清醒时产生的有毒物质，长期睡眠不足回导致大脑不健康造成思绪混乱。</p><p>睡觉时大脑会整理学习和思考过的信息，<strong>增强重要想要记住的，同时清理不重要的部分</strong>。</p><p><strong>睡前的复习可以帮助在睡梦中梦到</strong>，增进大脑的理解内容，也有机会将这些记忆整合。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由 UCSD 在 Coursera 上开设的一门基于神经科学和认知心理学的研究成果，通过提供一些实用技巧来改善学习效果的课程。学会如何学习，以及如何创意思考，解决所有问题。&lt;/p&gt;&lt;hr&gt;&lt;h2 id=&quot;Thinking-Modes&quot;&gt;&lt;a href=&quot;#Thinking-
      
    
    </summary>
    
    
      <category term="Coursera" scheme="https://Kasper4649.github.io/tags/Coursera/"/>
    
      <category term="Learning How to Learn" scheme="https://Kasper4649.github.io/tags/Learning-How-to-Learn/"/>
    
  </entry>
  
  <entry>
    <title>自我反省-消费矛盾体</title>
    <link href="https://Kasper4649.github.io/2019/10/03/%E8%87%AA%E6%88%91%E5%8F%8D%E7%9C%81-%E6%B6%88%E8%B4%B9%E7%9F%9B%E7%9B%BE%E4%BD%93/"/>
    <id>https://Kasper4649.github.io/2019/10/03/自我反省-消费矛盾体/</id>
    <published>2019-10-03T13:42:38.000Z</published>
    <updated>2019-10-03T14:31:42.855Z</updated>
    
    <content type="html"><![CDATA[<p>嘛，人到了一定年纪，就会经常反思自己以前所做的一切，或疯狂或谨慎。最近或者说这几年以来想的最多就是消费问题，感觉在这个问题上自己也挺矛盾的，就不知道自己到底是属于哪一种消费状态（？）。</p><p>以前包括现在的自己非常节约，能少花一分是一分，能用两块钱解决的事情绝对不会花三块钱。小学初中出门上学从来都只带饭钱，导致很多挺搞笑的事情经常发生，比如被擂肥（被小混混勒索钱财）时候身上只有买热干面钱，于是我就这被放走了，以及买烧麦时候发现没钱买盒子，只能先跟老板欠着第二天再来还。经常从学校带草稿纸回家攒起来卖钱，甚至有时候把同桌草稿纸也一起塞进书包。包括到了高中时候，母上大人一般一个星期给我两百块钱，但每次都是还能剩下将近一百块，她经常笑话我说搞这节约。现在想想自己真的是想尽一切办法少花钱，多攒钱，也不知道是为了啥。</p><p>现在自己也知道自己这么做不对，买东西就应该在能力范围内买最好的，不能亏待自己，但是就是做不到。买东西经常货比三家，一来二去时间浪费太多，特别追求性价比，性价比本来就是一种穷人思维，富人都是用金钱买时间，自己却是反向操作。</p><p>正因为说自己是消费矛盾体，是因为感觉自己又属于冲动型消费，比如小学生时候买小四爵迹限定礼盒，280 在当时视一块钱为珍宝的自己来说简直是不可能掏得出来的，还有大学开始追星，从赖美云到现在的西野七濑，分分钟出手几千块，事后也并没有太大心理波动（？）。</p><p>就是这样，自己也不是很清楚自己的行为，到底是节约呢还是乱花钱呢，姑且归为消费矛盾体吧。也有在看《小狗钱钱》、《富爸爸穷爸爸》这类书，真的很希望能好好改改自己的消费观。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;嘛，人到了一定年纪，就会经常反思自己以前所做的一切，或疯狂或谨慎。最近或者说这几年以来想的最多就是消费问题，感觉在这个问题上自己也挺矛盾的，就不知道自己到底是属于哪一种消费状态（？）。&lt;/p&gt;&lt;p&gt;以前包括现在的自己非常节约，能少花一分是一分，能用两块钱解决的事情绝对不会花
      
    
    </summary>
    
    
      <category term="roast" scheme="https://Kasper4649.github.io/tags/roast/"/>
    
  </entry>
  
  <entry>
    <title>996.ICU</title>
    <link href="https://Kasper4649.github.io/2019/04/13/996-ICU/"/>
    <id>https://Kasper4649.github.io/2019/04/13/996-ICU/</id>
    <published>2019-04-13T14:13:22.000Z</published>
    <updated>2019-04-13T15:21:42.946Z</updated>
    
    <content type="html"><![CDATA[<p>最近有一个事件在互联网行业引起了轩然大波，996.ICU。</p><p>「996」即早上 9 点上班，晚上 9 点下班，每周工作 6 天。<br>「996.ICU」即上班 996，生病 ICU。</p><p>这次风波声势浩大，网络上各种鄙文狂轰滥炸，但是到头来似乎却没有取得什么实际进展。现实世界依然风平浪静，大家该加班的加班，只不过平添了一点闲聊时候的话题。</p><p>其实 996 在程序员圈中并不新奇，各个互联网公司多多少少都存在这个现象，为什么如今却突然引起巨大的轰动，在 github 高星榜排名第二，甚至连 Python 之父都点了 star 并发文表态 996 是不人道的。</p><p>前段时间有赞在年会上宣布执行 996 制，被员工投诉，这也成了该事件的导火索之一。或许是大家早已对 996 心怀怨恨已久，这次刚好有人带头反对，才引起了如此大的反响。</p><p>程序员作为 IT 圈中最底层的一环，被外行戏称为程序猿，自嘲称码农。格子衫，黑框眼镜便是对程序员普遍的印象。程序员在外人看来是一个高薪职业，然而加班却是常态，换算成时薪来说并没有多高。更有有心人对关注 996.ICU 项目的人群进行了数据分析，结论指出绝大多数的人 follower 小于 10，也就是说都是一些底层默默无闻的程序员。大家的想法其实很单纯，反对 996 无外乎于斥责 996 是对劳动法的无视，以及活多钱少的痛诉，最重要的也是对自己身体健康安全的担忧。</p><p>关于 996,我认为，你不做，有一堆人等着换你。既然你改变不了，不如学会锻炼自己，让自己适应当下社会节奏，这比「劳资不爽 996，离职了」却言行不一的口嗨要重要得多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近有一个事件在互联网行业引起了轩然大波，996.ICU。&lt;/p&gt;&lt;p&gt;「996」即早上 9 点上班，晚上 9 点下班，每周工作 6 天。&lt;br&gt;「996.ICU」即上班 996，生病 ICU。&lt;/p&gt;&lt;p&gt;这次风波声势浩大，网络上各种鄙文狂轰滥炸，但是到头来似乎却没有取得
      
    
    </summary>
    
    
      <category term="roast" scheme="https://Kasper4649.github.io/tags/roast/"/>
    
  </entry>
  
  <entry>
    <title>RestTemplate</title>
    <link href="https://Kasper4649.github.io/2019/01/28/RestTemplate/"/>
    <id>https://Kasper4649.github.io/2019/01/28/RestTemplate/</id>
    <published>2019-01-28T14:25:42.000Z</published>
    <updated>2019-10-03T13:55:02.164Z</updated>
    
    <content type="html"><![CDATA[<p>最近做一个关于设计个人博客的项目实训，其中需要实现上传照片功能，思考再三，觉得保存在本地着实很 low，于是选择上传到第三方图床。接下来的问题很明确，如何调用第三方接口，首先想到的是大名鼎鼎的 HTTPClient，但 Spring 封装了库，提供了更为简洁的资源请求方式 RestTemplate。</p><h3 id="API-接口"><a href="#API-接口" class="headerlink" title="API 接口"></a>API 接口</h3><p>查看第三方图床 API 文档，上传图片为 POST 方法，参数暂时只需 File。<br><img src="https://i.loli.net/2019/01/30/5c51bf30ee1ad.png" alt="API"><br><img src="https://i.loli.net/2019/01/30/5c51c0f78e7a1.png" alt="API"></p><h4 id="请求-API"><a href="#请求-API" class="headerlink" title="请求 API"></a>请求 API</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">uploadViaSmms</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 支持中文</span></span><br><span class="line">    restTemplate.getMessageConverters().set(<span class="number">1</span>, <span class="keyword">new</span> StringHttpMessageConverter(StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">    String requestUrl = <span class="string">"https://sm.ms/api/upload"</span>;</span><br><span class="line"></span><br><span class="line">    MultiValueMap&lt;String, Object&gt; postParameters = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">    postParameters.add(<span class="string">"smfile"</span>, file.getResource());</span><br><span class="line"></span><br><span class="line">    HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">    headers.setContentType(MediaType.MULTIPART_FORM_DATA);</span><br><span class="line">    headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));</span><br><span class="line">    headers.add(<span class="string">"user-agent"</span>, <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36"</span>);</span><br><span class="line"></span><br><span class="line">    HttpEntity&lt;MultiValueMap&lt;String, Object&gt;&gt; requestEntity = <span class="keyword">new</span> HttpEntity&lt;&gt;(postParameters, headers);</span><br><span class="line">    ResponseEntity&lt;String&gt; response = restTemplate.postForEntity(requestUrl, requestEntity, String.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response.getBody();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="处理-JSON-数据"><a href="#处理-JSON-数据" class="headerlink" title="处理 JSON 数据"></a>处理 JSON 数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">      Result r = <span class="keyword">new</span> Result();</span><br><span class="line">      String result = uploadViaSmms(file);</span><br><span class="line"></span><br><span class="line">      JsonObject jsonObject = <span class="keyword">new</span> JsonParser().parse(result).getAsJsonObject();</span><br><span class="line">      String code = jsonObject.get(<span class="string">"code"</span>).getAsString();</span><br><span class="line">      <span class="keyword">if</span>(!code.equals(<span class="string">"success"</span>)) &#123;</span><br><span class="line">          r.setResultCode(ResultCode.UPLOAD_ERROR);</span><br><span class="line">          <span class="keyword">return</span> r;</span><br><span class="line">      &#125;</span><br><span class="line">      String url = jsonObject.get(<span class="string">"data"</span>).getAsJsonObject().get(<span class="string">"url"</span>).getAsString();</span><br><span class="line">      String deleteUrl = jsonObject.get(<span class="string">"data"</span>).getAsJsonObject().get(<span class="string">"delete"</span>).getAsString();</span><br><span class="line"></span><br><span class="line">imageService.upload(url, deleteUrl, description);</span><br><span class="line">      r.setResultCode(ResultCode.SUCCESS);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> r;</span><br></pre></td></tr></table></figure><h3 id="需要注意的问题"><a href="#需要注意的问题" class="headerlink" title="需要注意的问题"></a>需要注意的问题</h3><ul><li>如果 headers 不添加 user-agent，则会报 <strong>403 Forbidden</strong>，也算一种常见的反爬措施。<br><img src="https://i.loli.net/2019/01/30/5c51bf30c44f6.png" alt="TIM截图20190128153446.png"></li><li>file 类型必须是可序列化元素，只能使用<code>file.getResource()</code>，不能使用<code>file.getBytes()</code>或<code>file.getInputStream()</code>，否则会报 <strong>No serializer found</strong>。<br><img src="https://i.loli.net/2019/01/30/5c51bf31909d5.png" alt="TIM截图20190128153853.png"><br><del>↑这个问题困扰了我两天，晚上 4 点都睡不着都是因为这，コノヤロー！</del></li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://stackoverflow.com/questions/44922261/why-do-i-always-get-403-when-fetching-data-with-resttemplate" target="_blank" rel="noopener">403 Forbidden</a></li><li><a href="https://stackoverflow.com/questions/2591098/how-to-parse-json-in-java" target="_blank" rel="noopener">parse JSON</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近做一个关于设计个人博客的项目实训，其中需要实现上传照片功能，思考再三，觉得保存在本地着实很 low，于是选择上传到第三方图床。接下来的问题很明确，如何调用第三方接口，首先想到的是大名鼎鼎的 HTTPClient，但 Spring 封装了库，提供了更为简洁的资源请求方式 
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://Kasper4649.github.io/tags/Spring/"/>
    
      <category term="RestTemplate" scheme="https://Kasper4649.github.io/tags/RestTemplate/"/>
    
  </entry>
  
  <entry>
    <title>THE GREATE GATSBY</title>
    <link href="https://Kasper4649.github.io/2019/01/23/THE-GREATE-GATSBY/"/>
    <id>https://Kasper4649.github.io/2019/01/23/THE-GREATE-GATSBY/</id>
    <published>2019-01-23T11:53:13.000Z</published>
    <updated>2019-01-23T12:50:03.198Z</updated>
    
    <content type="html"><![CDATA[<p>作为一部闻名世界的著作，可惜的是直到现在我才读完，还是因为报名了英文原著阅读计划。也许正是由于其太过出名，耳濡目染的我拜读完后，却没有什么想说的。</p><p>《THE GREATE GATSBY》讲述的是在上个世纪二十年代的美国，那个物欲横流的时代，主人公 Gatsby 出生卑微，但他通过自己的努力，最终靠贩卖私酒暴富。他大费周折，不惜巨资买下了西卵的豪宅，经常举办豪华聚会，大宴宾客，为的就是能跻身上流社会，重新赢得自己心爱之人 Daisy 的芳心。可是今昔之人已非故人，Daisy 已经不再是 Gatsby 心目中的那个纯情女孩，现在的她已然变成一副愚蠢自私，庸俗的躯壳。然而 Gatsby 并没有放弃，还在做着苦苦的挣扎，对 Daisy 抱有着一丝的幻想，可这却成为压死 Gatsby 生命的最后一根稻草。</p><p>Daisy 驾驶 Gatsby 的车撞死了 Tom 的情妇 Mrytle，Gatsby 想尽办法帮她脱罪，可 Daisy 之后却再无跟他联系。</p><blockquote><p>他一定是觉得已经失去了往日那个温暖的世界，为一个梦想空守了太久，付出了太高的代价；他一定是透过可怕的树叶仰望到一片陌生的天空；他一定感到毛骨悚然，当他发现玫瑰是多么丑恶，而阳光照在刚刚露头的小草上又是多么残忍。</p></blockquote><p>当知道再也等不到 Daisy 的电话后，Gatsby 终于明白。自己一直追求财富，向往上流，最终抵达时，才发现上流污浊不堪，财富一文不值，而真情难得。</p><blockquote><p>一阵微风吹不皱水面，却使它载着莫名的负担改变了莫名的方向。一簇落叶拥着它慢慢旋转，像指南针一样，在水面上画出一道细细的红圈。</p></blockquote><p>Gatsby 的死对于他来说其实倒是种解脱，他跟 Daisy 本就不是同路人，与其带着遗憾如此痛苦地生活，不如就这样结束。</p><blockquote><p>Gatsby 一生的信念就寄托在这盏绿灯上，这个一年一年在我们眼前渐渐远去的极乐未来。它曾经从我们身边溜走，不过没有关系——明天我们会跑得更快，手臂伸得更远……总有一个美好的清晨—— ——<br>我们奋力前行，小舟逆水而上，不断地被浪潮推回到过去。</p></blockquote><p>都说 Gatsby 是爱情的牺牲品，可有谁看到那盏绿灯，其实只是他失意少年时代的梦想。或许 Gatsby 追寻的根本就不是 Daisy，当 Gatsby 见到了 Daisy，却发现自己这么奋力前行，依然无法回到遥远的过去了。</p><p>他爱的是过往，是执念，是不甘，唯有死亡才能祭奠这已完满的一切。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一部闻名世界的著作，可惜的是直到现在我才读完，还是因为报名了英文原著阅读计划。也许正是由于其太过出名，耳濡目染的我拜读完后，却没有什么想说的。&lt;/p&gt;&lt;p&gt;《THE GREATE GATSBY》讲述的是在上个世纪二十年代的美国，那个物欲横流的时代，主人公 Gatsby 
      
    
    </summary>
    
    
      <category term="review" scheme="https://Kasper4649.github.io/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter 导出 PDF</title>
    <link href="https://Kasper4649.github.io/2018/11/26/Jupyter-%E5%AF%BC%E5%87%BA-PDF/"/>
    <id>https://Kasper4649.github.io/2018/11/26/Jupyter-导出-PDF/</id>
    <published>2018-11-26T12:48:31.000Z</published>
    <updated>2018-11-26T14:05:16.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="必须安装的软件或-Python-库"><a href="#必须安装的软件或-Python-库" class="headerlink" title="必须安装的软件或 Python 库"></a>必须安装的软件或 Python 库</h1><p>Jupyter Notebook 导出成 PDF 需要 LaTeX 以及 Pandoc 支持。</p><ol><li>安装 <a href="https://github.com/jgm/pandoc/releases/tag/1.15.0.6" target="_blank" rel="noopener">pandoc</a></li><li>安装 <a href="http://www.miktex.org/download" target="_blank" rel="noopener">MIKTeX</a></li><li>安装 nbconvert 库</li></ol><h1 id="中文支持"><a href="#中文支持" class="headerlink" title="中文支持"></a>中文支持</h1><p>由于默认模版的设定，Latex 无法识别中文无法导出。为了解决这个问题，需要将 ipynb 转为 tex，然后修改 tex 内容，最后由 MIKTeX 生成 PDF 文件。</p><h2 id="修改-nbconvert"><a href="#修改-nbconvert" class="headerlink" title="修改 nbconvert"></a>修改 nbconvert</h2><p>首先找到 nbconvert 库下的 article.tplx(<code>C:\Users\34208\Anaconda3\Lib\site-packages\nbconvert\templates\latex</code>)，用 notepad++ 打开文件，修改<code>\documentclass[11]{article}</code>为<code>\documentclass{ctexart}</code>。</p><h2 id="安装-MIKTeX-依赖包"><a href="#安装-MIKTeX-依赖包" class="headerlink" title="安装 MIKTeX 依赖包"></a>安装 MIKTeX 依赖包</h2><p>如果此时直接将 ipynb 导出为 PDF 则会显示以下错误，需安装依赖包。<br><img src="https://i.loli.net/2018/11/26/5bfb902040114.png" alt="导出 PDF 错误"><br><img src="https://i.loli.net/2018/11/26/5bfb90203e3c7.png" alt="控制台安装依赖包"></p><p>安装依赖包过程中，会经常遇到无法连接到服务器，只需多次点击安装。</p><p><img src="https://i.loli.net/2018/11/26/5bfb9020a068e.png" alt="连接服务器错误"></p><p>用 Jupyter Notebook 可以直接将 ipynb 导出为 tex 文件，并直接修改其内容，在<code>\documentclass{article}</code>后面插入<code>\usepackage{fontspec, xunicode, xltxtra}</code><br><code>\setmainfont{Microsoft YaHei}</code>。</p><h2 id="生成-PDF"><a href="#生成-PDF" class="headerlink" title="生成 PDF"></a>生成 PDF</h2><p>最后编译 tex,生成 PDF。<br><code>xelatex your_tex_name.tex</code></p><p><img src="https://i.loli.net/2018/11/26/5bfb9020d4afa.png" alt="导出为 PDF"></p><p>此时通过 Jupyter Notebook 也可以直接导出为 PDF。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;必须安装的软件或-Python-库&quot;&gt;&lt;a href=&quot;#必须安装的软件或-Python-库&quot; class=&quot;headerlink&quot; title=&quot;必须安装的软件或 Python 库&quot;&gt;&lt;/a&gt;必须安装的软件或 Python 库&lt;/h1&gt;&lt;p&gt;Jupyter No
      
    
    </summary>
    
    
      <category term="Jupyter" scheme="https://Kasper4649.github.io/tags/Jupyter/"/>
    
      <category term="PDF" scheme="https://Kasper4649.github.io/tags/PDF/"/>
    
  </entry>
  
  <entry>
    <title>博客风格更新</title>
    <link href="https://Kasper4649.github.io/2018/09/23/%E5%8D%9A%E5%AE%A2%E9%A3%8E%E6%A0%BC%E6%9B%B4%E6%96%B0/"/>
    <id>https://Kasper4649.github.io/2018/09/23/博客风格更新/</id>
    <published>2018-09-22T17:51:59.000Z</published>
    <updated>2019-01-23T14:07:04.792Z</updated>
    
    <content type="html"><![CDATA[<p>之前一直在搜寻哪种主题更小众更新颖，前天偶然间看到了一个主题 element，被独特的风格所吸引，便开始着手对博客主题的更新。</p><p>由于主题过于小众，且为作者一人独立开发完成，提供的教程也只有 README.md 短短一点文字，相比于 NEXT 主题拥有完整的教程来说，确实使用起来存在一定的困难，以下罗列出一些摸索过程中觉得需要注意的地方。</p><h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><p>下载完 theme 文件夹后，还需要安装如下 hexo 插件才能正常显示博客界面</p><blockquote><p>hexo-generator-tag</p><p>hexo-generator-feed</p><p>hexo-renderer-ejs</p><p>hexo-renderer-less</p><p>hexo-renderer-marked</p><p>hexo-pagination</p><p>hexo-all-minifier</p><p>hexo-autoprefixer</p><p>hexo-front-matter</p></blockquote><h3 id="about-关于我"><a href="#about-关于我" class="headerlink" title="about 关于我"></a>about 关于我</h3><p>直接在 bash 界面输入</p><blockquote><p>hexo new page “about”</p></blockquote><p>在 source 文件夹下即可生成 about 文件夹，下含 index.md 可以编写自己的介绍。</p><h3 id="table-of-contents-分级目录"><a href="#table-of-contents-分级目录" class="headerlink" title="table of contents 分级目录"></a>table of contents 分级目录</h3><p>当一个博客文需要分级目录时，需要在文章开头添加</p><blockquote><p>toc: true</p></blockquote><p>不需要则不用添加，默认 false。</p><h3 id="search-搜索"><a href="#search-搜索" class="headerlink" title="search 搜索"></a>search 搜索</h3><p>使用免费的 algolia，步骤详见参考资料，在此不赘述。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://artifact.me/universal-search-4-algolia-search/" title="algolia-search" target="_blank" rel="noopener">algolia-search</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前一直在搜寻哪种主题更小众更新颖，前天偶然间看到了一个主题 element，被独特的风格所吸引，便开始着手对博客主题的更新。&lt;/p&gt;&lt;p&gt;由于主题过于小众，且为作者一人独立开发完成，提供的教程也只有 README.md 短短一点文字，相比于 NEXT 主题拥有完整的教程来
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://Kasper4649.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>关于贫困认定的一些碎碎</title>
    <link href="https://Kasper4649.github.io/2018/09/16/%E5%85%B3%E4%BA%8E%E8%B4%AB%E5%9B%B0%E8%AE%A4%E5%AE%9A%E7%9A%84%E4%B8%80%E4%BA%9B%E7%A2%8E%E7%A2%8E/"/>
    <id>https://Kasper4649.github.io/2018/09/16/关于贫困认定的一些碎碎/</id>
    <published>2018-09-16T15:20:10.000Z</published>
    <updated>2018-09-22T16:22:20.743Z</updated>
    
    <content type="html"><![CDATA[<p>每一年都会进行贫困认定，之前只是作为班级普通的一员进行简单的举手表决，这一次成为了贫困认定小组的一员，更深入地了解了一些情况。</p><p>虽然之前就知道这个贫困认定很容易，好多人想着有钱白拿为啥不拿，毕竟只是简简单单地填个表然后找个镇级以上单位盖个章最后班级通过递交名单就可以拿到钱。但是拿到申请名单后，看到一个班居然有十几个人之多，占总人数的一半。写的申请理由大多数也就只有草草一两句话，还大都是一个模式，『务农』『哪个哪个生病』等等，只有一个人写了一大段肺腑之言较为详细地阐述了家里的情况。不管是否属实，起码申请理由里得表达清楚家里到底啥情况，毕竟同学不一定知道，辅导员国家就更不知道了。作为最后把关的学生评定小组只能通过你写的申请理由和上报的年收入这个数字，再结合日常学习生活中的实际状态来评定贫困等级。</p><p>实际家境不错的人申请贫困认定我不好多说，那些家庭确实困难的人我希望能够对认定上点心，对自己的事情负责，申请理由尽量表述详实，毕竟国家出台这个政策就是希望能帮助到贫困学生，还有各种奖学金评优评先都是贫困生优先。属于自己的机会要努力争取，而不要等到最后再回过头来抱怨评定的不公。</p><p>其实我非常不喜欢加入评定小组，我不想也不愿去了解别人的故事，更不想去用一个具体数字和一段话来评定一个人的悲惨程度。</p><p>PS：评定一开始我还在想该怎么说，结果看到大家直接指名道姓某某某肯定虚假直接评为不困难，我就放心了hhhh。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每一年都会进行贫困认定，之前只是作为班级普通的一员进行简单的举手表决，这一次成为了贫困认定小组的一员，更深入地了解了一些情况。&lt;/p&gt;&lt;p&gt;虽然之前就知道这个贫困认定很容易，好多人想着有钱白拿为啥不拿，毕竟只是简简单单地填个表然后找个镇级以上单位盖个章最后班级通过递交名单就
      
    
    </summary>
    
    
      <category term="roast" scheme="https://Kasper4649.github.io/tags/roast/"/>
    
  </entry>
  
  <entry>
    <title>hello hexo</title>
    <link href="https://Kasper4649.github.io/2018/05/05/hello-hexo/"/>
    <id>https://Kasper4649.github.io/2018/05/05/hello-hexo/</id>
    <published>2018-05-04T16:13:35.000Z</published>
    <updated>2018-09-22T18:10:56.462Z</updated>
    
    <content type="html"><![CDATA[<p>关于搭建博客的教程网上也很多，在此不过多赘述，只是提一些本人搭建时遇到的一些问题以及解决方案。</p><h3 id="创建新仓库"><a href="#创建新仓库" class="headerlink" title="创建新仓库"></a>创建新仓库</h3><p>在 github 上面创建一个 repository 时，项目名称必须为<strong>用户名.github.io</strong>。</p><h3 id="关于-git-的操作"><a href="#关于-git-的操作" class="headerlink" title="关于 git 的操作"></a>关于 git 的操作</h3><p>git 是开源的分布式版本控制系统，用于敏捷高效地处理项目。<br>安装成功后需要将 git 与 github 进行绑定，右键 git bash here 设置 user.name 和user.email 配置信息</p><blockquote><p>git config –global user.name “github 用户名”<br>git config –global user.email “github 注册邮箱”</p></blockquote><p>生成秘钥文件：</p><blockquote><p>ssh-keygen -t rsa -C “github 注册邮箱”</p></blockquote><p>直接回车便可默认生成 .ssh 文件。打开 id_rsa.pub 密钥，将内容全部复制，在 github 中 new SSH key 粘贴。<br>在 git bash 中检测 github 公钥是否配置成功：</p><blockquote><p>ssh <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a></p></blockquote><p>若显示 Hi xxx！则配置成功。</p><p>设置 github 密钥是因为通过非对称加密的公钥与私钥来完成加密，公钥放置在 github 上，私钥放置在自己的电脑里。github 要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了 ssh，当你推送的时候，git 就会匹配你的私钥跟 github 上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送，这样可以保证每次的推送都是正确合法的。</p><h3 id="hexo-常用命令"><a href="#hexo-常用命令" class="headerlink" title="hexo 常用命令"></a>hexo 常用命令</h3><blockquote><p>npm install hexo -g #安装Hexo<br>npm update hexo -g #升级<br>hexo init #初始化博客<br>hexo n “我的博客” == hexo new “我的博客” #新建文章<br>hexo g == hexo generate #生成<br>hexo s == hexo server #启动服务预览<br>hexo d == hexo deploy #部署<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP<br>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</p></blockquote><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>网上关于搭建博客的教程众多，给大家提供了便利，但也正因如此，各自教程里的一些细节说法不一，导致本人搭建博客时遇到了大大小小的问题，前前后后大概花了四天时间才搭好了最基本的界面- -！</p><p>最后，博客总算是搭建好了，希望自己以后能坚持写写博客，记录自己的学习经历。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于搭建博客的教程网上也很多，在此不过多赘述，只是提一些本人搭建时遇到的一些问题以及解决方案。&lt;/p&gt;&lt;h3 id=&quot;创建新仓库&quot;&gt;&lt;a href=&quot;#创建新仓库&quot; class=&quot;headerlink&quot; title=&quot;创建新仓库&quot;&gt;&lt;/a&gt;创建新仓库&lt;/h3&gt;&lt;p&gt;在 gi
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://Kasper4649.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
